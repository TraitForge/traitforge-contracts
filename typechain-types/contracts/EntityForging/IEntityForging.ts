/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IEntityForging {
  export type ListingStruct = {
    account: AddressLike;
    tokenId: BigNumberish;
    isListed: boolean;
    fee: BigNumberish;
  };

  export type ListingStructOutput = [
    account: string,
    tokenId: bigint,
    isListed: boolean,
    fee: bigint
  ] & { account: string; tokenId: bigint; isListed: boolean; fee: bigint };
}

export interface IEntityForgingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelListingForForging"
      | "fetchListings"
      | "forgeWithListed"
      | "getListedTokenIds"
      | "getListings"
      | "listForForging"
      | "setMinimumListingFee"
      | "setNukeFundAddress"
      | "setOneYearInDays"
      | "setTaxCut"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CancelledListingForForging"
      | "EntityForged"
      | "ListedForForging"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelListingForForging",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forgeWithListed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListedTokenIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listForForging",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumListingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNukeFundAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOneYearInDays",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxCut",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelListingForForging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forgeWithListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListedTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listForForging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumListingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNukeFundAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOneYearInDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTaxCut", data: BytesLike): Result;
}

export namespace CancelledListingForForgingEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EntityForgedEvent {
  export type InputTuple = [
    newTokenid: BigNumberish,
    parent1Id: BigNumberish,
    parent2Id: BigNumberish,
    newEntropy: BigNumberish,
    forgingFee: BigNumberish
  ];
  export type OutputTuple = [
    newTokenid: bigint,
    parent1Id: bigint,
    parent2Id: bigint,
    newEntropy: bigint,
    forgingFee: bigint
  ];
  export interface OutputObject {
    newTokenid: bigint;
    parent1Id: bigint;
    parent2Id: bigint;
    newEntropy: bigint;
    forgingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListedForForgingEvent {
  export type InputTuple = [tokenId: BigNumberish, fee: BigNumberish];
  export type OutputTuple = [tokenId: bigint, fee: bigint];
  export interface OutputObject {
    tokenId: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IEntityForging extends BaseContract {
  connect(runner?: ContractRunner | null): IEntityForging;
  waitForDeployment(): Promise<this>;

  interface: IEntityForgingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelListingForForging: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fetchListings: TypedContractMethod<
    [],
    [IEntityForging.ListingStructOutput[]],
    "view"
  >;

  forgeWithListed: TypedContractMethod<
    [forgerTokenId: BigNumberish, mergerTokenId: BigNumberish],
    [bigint],
    "payable"
  >;

  getListedTokenIds: TypedContractMethod<
    [tokenId_: BigNumberish],
    [bigint],
    "view"
  >;

  getListings: TypedContractMethod<
    [id: BigNumberish],
    [IEntityForging.ListingStructOutput],
    "view"
  >;

  listForForging: TypedContractMethod<
    [tokenId: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinimumListingFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNukeFundAddress: TypedContractMethod<
    [_nukeFundAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setOneYearInDays: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTaxCut: TypedContractMethod<[_taxCut: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelListingForForging"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fetchListings"
  ): TypedContractMethod<[], [IEntityForging.ListingStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "forgeWithListed"
  ): TypedContractMethod<
    [forgerTokenId: BigNumberish, mergerTokenId: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getListedTokenIds"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getListings"
  ): TypedContractMethod<
    [id: BigNumberish],
    [IEntityForging.ListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "listForForging"
  ): TypedContractMethod<
    [tokenId: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinimumListingFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNukeFundAddress"
  ): TypedContractMethod<[_nukeFundAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOneYearInDays"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTaxCut"
  ): TypedContractMethod<[_taxCut: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CancelledListingForForging"
  ): TypedContractEvent<
    CancelledListingForForgingEvent.InputTuple,
    CancelledListingForForgingEvent.OutputTuple,
    CancelledListingForForgingEvent.OutputObject
  >;
  getEvent(
    key: "EntityForged"
  ): TypedContractEvent<
    EntityForgedEvent.InputTuple,
    EntityForgedEvent.OutputTuple,
    EntityForgedEvent.OutputObject
  >;
  getEvent(
    key: "ListedForForging"
  ): TypedContractEvent<
    ListedForForgingEvent.InputTuple,
    ListedForForgingEvent.OutputTuple,
    ListedForForgingEvent.OutputObject
  >;

  filters: {
    "CancelledListingForForging(uint256)": TypedContractEvent<
      CancelledListingForForgingEvent.InputTuple,
      CancelledListingForForgingEvent.OutputTuple,
      CancelledListingForForgingEvent.OutputObject
    >;
    CancelledListingForForging: TypedContractEvent<
      CancelledListingForForgingEvent.InputTuple,
      CancelledListingForForgingEvent.OutputTuple,
      CancelledListingForForgingEvent.OutputObject
    >;

    "EntityForged(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      EntityForgedEvent.InputTuple,
      EntityForgedEvent.OutputTuple,
      EntityForgedEvent.OutputObject
    >;
    EntityForged: TypedContractEvent<
      EntityForgedEvent.InputTuple,
      EntityForgedEvent.OutputTuple,
      EntityForgedEvent.OutputObject
    >;

    "ListedForForging(uint256,uint256)": TypedContractEvent<
      ListedForForgingEvent.InputTuple,
      ListedForForgingEvent.OutputTuple,
      ListedForForgingEvent.OutputObject
    >;
    ListedForForging: TypedContractEvent<
      ListedForForgingEvent.InputTuple,
      ListedForForgingEvent.OutputTuple,
      ListedForForgingEvent.OutputObject
    >;
  };
}

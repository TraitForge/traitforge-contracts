/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Airdrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Airdrop__factory>;
    getContractFactory(
      name: "AccessController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessController__factory>;
    getContractFactory(
      name: "AddressProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressProvider__factory>;
    getContractFactory(
      name: "AddressProviderResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressProviderResolver__factory>;
    getContractFactory(
      name: "DAOFund",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAOFund__factory>;
    getContractFactory(
      name: "DevFund",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DevFund__factory>;
    getContractFactory(
      name: "EntityForging",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EntityForging__factory>;
    getContractFactory(
      name: "EntityTrading",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EntityTrading__factory>;
    getContractFactory(
      name: "EntropyGenerator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EntropyGenerator__factory>;
    getContractFactory(
      name: "IAddressProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressProvider__factory>;
    getContractFactory(
      name: "IAirdrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAirdrop__factory>;
    getContractFactory(
      name: "IDAOFund",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDAOFund__factory>;
    getContractFactory(
      name: "IDevFund",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDevFund__factory>;
    getContractFactory(
      name: "IEntityForging",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntityForging__factory>;
    getContractFactory(
      name: "IEntityTrading",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntityTrading__factory>;
    getContractFactory(
      name: "IEntropyGenerator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntropyGenerator__factory>;
    getContractFactory(
      name: "INukeFund",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INukeFund__factory>;
    getContractFactory(
      name: "ITrait",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITrait__factory>;
    getContractFactory(
      name: "ITraitForgeNft",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITraitForgeNft__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "Roles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Roles__factory>;
    getContractFactory(
      name: "NukeFund",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NukeFund__factory>;
    getContractFactory(
      name: "Trait",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Trait__factory>;
    getContractFactory(
      name: "TraitForgeNft",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TraitForgeNft__factory>;

    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Airdrop",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Airdrop>;
    getContractAt(
      name: "AccessController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessController>;
    getContractAt(
      name: "AddressProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressProvider>;
    getContractAt(
      name: "AddressProviderResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressProviderResolver>;
    getContractAt(
      name: "DAOFund",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DAOFund>;
    getContractAt(
      name: "DevFund",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DevFund>;
    getContractAt(
      name: "EntityForging",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EntityForging>;
    getContractAt(
      name: "EntityTrading",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EntityTrading>;
    getContractAt(
      name: "EntropyGenerator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EntropyGenerator>;
    getContractAt(
      name: "IAddressProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressProvider>;
    getContractAt(
      name: "IAirdrop",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAirdrop>;
    getContractAt(
      name: "IDAOFund",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDAOFund>;
    getContractAt(
      name: "IDevFund",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDevFund>;
    getContractAt(
      name: "IEntityForging",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntityForging>;
    getContractAt(
      name: "IEntityTrading",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntityTrading>;
    getContractAt(
      name: "IEntropyGenerator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntropyGenerator>;
    getContractAt(
      name: "INukeFund",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.INukeFund>;
    getContractAt(
      name: "ITrait",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITrait>;
    getContractAt(
      name: "ITraitForgeNft",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITraitForgeNft>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "Roles",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Roles>;
    getContractAt(
      name: "NukeFund",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NukeFund>;
    getContractAt(
      name: "Trait",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Trait>;
    getContractAt(
      name: "TraitForgeNft",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TraitForgeNft>;

    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Pausable>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Enumerable>;
    deployContract(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Enumerable>;
    deployContract(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Airdrop",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Airdrop>;
    deployContract(
      name: "AccessController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessController>;
    deployContract(
      name: "AddressProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressProvider>;
    deployContract(
      name: "AddressProviderResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressProviderResolver>;
    deployContract(
      name: "DAOFund",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DAOFund>;
    deployContract(
      name: "DevFund",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DevFund>;
    deployContract(
      name: "EntityForging",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EntityForging>;
    deployContract(
      name: "EntityTrading",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EntityTrading>;
    deployContract(
      name: "EntropyGenerator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EntropyGenerator>;
    deployContract(
      name: "IAddressProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressProvider>;
    deployContract(
      name: "IAirdrop",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAirdrop>;
    deployContract(
      name: "IDAOFund",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDAOFund>;
    deployContract(
      name: "IDevFund",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDevFund>;
    deployContract(
      name: "IEntityForging",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntityForging>;
    deployContract(
      name: "IEntityTrading",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntityTrading>;
    deployContract(
      name: "IEntropyGenerator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntropyGenerator>;
    deployContract(
      name: "INukeFund",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INukeFund>;
    deployContract(
      name: "ITrait",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITrait>;
    deployContract(
      name: "ITraitForgeNft",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITraitForgeNft>;
    deployContract(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router01>;
    deployContract(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: "Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "Roles",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Roles>;
    deployContract(
      name: "NukeFund",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NukeFund>;
    deployContract(
      name: "Trait",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Trait>;
    deployContract(
      name: "TraitForgeNft",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TraitForgeNft>;

    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Pausable>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "ERC721Enumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Enumerable>;
    deployContract(
      name: "IERC721Enumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Enumerable>;
    deployContract(
      name: "IERC721Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Airdrop",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Airdrop>;
    deployContract(
      name: "AccessController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessController>;
    deployContract(
      name: "AddressProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressProvider>;
    deployContract(
      name: "AddressProviderResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressProviderResolver>;
    deployContract(
      name: "DAOFund",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DAOFund>;
    deployContract(
      name: "DevFund",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DevFund>;
    deployContract(
      name: "EntityForging",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EntityForging>;
    deployContract(
      name: "EntityTrading",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EntityTrading>;
    deployContract(
      name: "EntropyGenerator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EntropyGenerator>;
    deployContract(
      name: "IAddressProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressProvider>;
    deployContract(
      name: "IAirdrop",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAirdrop>;
    deployContract(
      name: "IDAOFund",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDAOFund>;
    deployContract(
      name: "IDevFund",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDevFund>;
    deployContract(
      name: "IEntityForging",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntityForging>;
    deployContract(
      name: "IEntityTrading",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntityTrading>;
    deployContract(
      name: "IEntropyGenerator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntropyGenerator>;
    deployContract(
      name: "INukeFund",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INukeFund>;
    deployContract(
      name: "ITrait",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITrait>;
    deployContract(
      name: "ITraitForgeNft",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITraitForgeNft>;
    deployContract(
      name: "IUniswapV2Router01",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router01>;
    deployContract(
      name: "IUniswapV2Router02",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: "Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "Roles",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Roles>;
    deployContract(
      name: "NukeFund",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NukeFund>;
    deployContract(
      name: "Trait",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Trait>;
    deployContract(
      name: "TraitForgeNft",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TraitForgeNft>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
